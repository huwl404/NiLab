#!/usr/bin/env python3

import argparse
import os
import subprocess

from read_line_format import read_line_format
from write_lst import write_lst

"""
缩小所有照片的尺寸并放到一个文件夹中，将micrograph_ctf.star转换为micrograph_ctf.lst
"""

parser = argparse.ArgumentParser(description='This program will bin all the micrographs and put them in a directory. Then it will convert .star file to .lst file')
parser.add_argument('dir', metavar='Micrograph_directory', help='The directory containing micrographs')
parser.add_argument('bin', metavar='Bin_factor', type=int, help='The bin factor you would like to use')
parser.add_argument('pixel', metavar='Pixel_size', type=float, help='The original pixel size')
parser.add_argument('star', metavar='STAR_file', help='The .star file generated by RELION after CTF estimation')
parser.add_argument('-o', metavar='--output', dest='output', default='micrograph_ctf.lst', help='The output file. Default: micrograph_ctf.lst')
parser.add_argument('-s', metavar='--suffix', dest='suffix', default='.mrc', help='The suffix of micrographs. Default: mrc')

args = parser.parse_args()

input_dir = args.dir
bin_factor = args.bin
pixel = args.pixel
instar = args.star
lst = args.output
suffix = args.suffix

pixel_b = pixel * bin_factor

file_list = []
for file in os.listdir(input_dir):
    if file.endswith(suffix):
        file_list.append(file)

if bin_factor > 1:
    # 创建文件夹
    if os.path.exists(f'{input_dir}/bin{bin_factor}') == False:
        os.mkdir(f'{input_dir}/bin{bin_factor}')
    for j,i in enumerate(file_list):
        name = i.split('.')[0]
        p = subprocess.Popen(f'relion_image_handler --i {input_dir}/{i} --o {input_dir}/bin{bin_factor}/{name}_bin{bin_factor}.mrc --angpix {pixel} --rescale_angpix {pixel_b} >> preprocess.log', shell=True)
        if j != 0:
            if j % 12 == 0:
                p.wait()
                print(f' {j} micrographs are binned!\n')
        if j == len(file_list)-1:
            p.wait()
                #time.sleep(5)

fnum = 0 # image number in new file

star_format = read_line_format(instar)
if star_format[-1] == 0:
    spliter = " "
elif star_format[-1] == 1:
    spliter = "\t"
with open(instar, 'r') as f:
    lines = f.readlines()

if len(star_format) == 3:
    write_lst(lines, star_format, lst, 0, spliter, fnum, bin_factor)
else:
    write_lst(lines, star_format, lst, 1, spliter, fnum, bin_factor)

print(" All tasks are finished!\n")